// Generated by CoffeeScript 1.3.1
(function() {
  var Pie, redis, _;

  redis = require('redis').createClient();

  _ = require('underscore');

  Pie = (function() {

    Pie.name = 'Pie';

    Pie.key = function() {
      return "Pie:" + process.env.NODE_ENV;
    };

    Pie.states = ['inactive', 'making', 'ready'];

    Pie.all = function(callback) {
      return redis.hgetall(Pie.key(), function(err, objects) {
        var key, pie, pies, value;
        pies = [];
        for (key in objects) {
          value = objects[key];
          pie = new Pie(JSON.parse(value));
          pies.push(pie);
        }
        return callback(null, pies);
      });
    };

    Pie.active = function(callback) {
      return Pie.all(function(err, pies) {
        var activePies, makingPies, pie, readyPies, sortedPies, _i, _len;
        activePies = [];
        for (_i = 0, _len = pies.length; _i < _len; _i++) {
          pie = pies[_i];
          if (pie.state !== 'inactive') {
            activePies.push(pie);
          }
        }
        readyPies = _.filter(activePies, function(pie) {
          return pie.state === 'ready';
        });
        makingPies = _.filter(activePies, function(pie) {
          return pie.state === 'making';
        });
        readyPies = _.sortBy(readyPies, function(pie) {
          return -pie.stateUpdatedAt;
        });
        makingPies = _.sortBy(makingPies, function(pie) {
          return -pie.stateUpdatedAt;
        });
        sortedPies = _.flatten([makingPies, readyPies]);
        return callback(null, sortedPies);
      });
    };

    Pie.getById = function(id, callback) {
      return redis.hget(Pie.key(), id, function(err, json) {
        var pie;
        if (json === null) {
          callback(new Error("Pie '" + id + "' could not be found."));
          return;
        }
        pie = new Pie(JSON.parse(json));
        return callback(null, pie);
      });
    };

    function Pie(attributes) {
      var key, value;
      for (key in attributes) {
        value = attributes[key];
        this[key] = value;
      }
      this.setDefaults();
      this;

    }

    Pie.prototype.setDefaults = function() {
      if (!this.state) {
        this.state = 'inactive';
      }
      this.generateId();
      return this.defineStateMachine();
    };

    Pie.prototype.generateId = function() {
      if (!this.id && this.name) {
        return this.id = this.name.replace(/\s/g, '-');
      }
    };

    Pie.prototype.defineStateMachine = function() {
      var state, _i, _len, _ref, _results,
        _this = this;
      _ref = Pie.states;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        state = _ref[_i];
        _results.push((function(state) {
          return _this[state] = function(callback) {
            this.state = state;
            this.stateUpdatedAt = (new Date).getTime();
            return this.save(function() {
              return callback();
            });
          };
        })(state));
      }
      return _results;
    };

    Pie.prototype.save = function(callback) {
      var _this = this;
      this.generateId();
      return redis.hset(Pie.key(), this.id, JSON.stringify(this), function(err, responseCode) {
        return callback(null, _this);
      });
    };

    Pie.prototype.destroy = function(callback) {
      return redis.hdel(Pie.key(), this.id, function(err) {
        if (callback) {
          return callback(err);
        }
      });
    };

    return Pie;

  })();

  module.exports = Pie;

}).call(this);
